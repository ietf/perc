<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' []>
<rfc ipr="trust200902" category="std" docName="draft-ietf-perc-double-11">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc private=""?>
<?rfc topblock="yes"?>
<?rfc comments="no"?>
<front>
<title abbrev="Double SRTP">SRTP Double Encryption Procedures</title>

<author initials="C." surname="Jennings" fullname="Cullen Jennings">
<organization>Cisco Systems</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>fluffy@iii.ca</email>
<uri></uri>
</address>
</author>
<author initials="P." surname="Jones" fullname="Paul E. Jones">
<organization>Cisco Systems</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>paulej@packetizer.com</email>
<uri></uri>
</address>
</author>
<author initials="R." surname="Barnes" fullname="Richard Barnes">
<organization>Cisco Systems</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>rlb@ipv.sx</email>
<uri></uri>
</address>
</author>
<author initials="A.B." surname="Roach" fullname="Adam Roach">
<organization>Mozilla</organization>
<address>
<postal>
<street></street>
<city></city>
<code></code>
<country></country>
<region></region>
</postal>
<phone></phone>
<email>adam@nostrum.com</email>
<uri></uri>
</address>
</author>
<date year="2020" month="January" day="10"/>

<area>Internet</area>
<workgroup></workgroup>
<keyword>PERC</keyword>
<keyword>SRTP</keyword>
<keyword>RTP</keyword>
<keyword>conferencing</keyword>
<keyword>encryption</keyword>


<abstract>
<t>In some conferencing scenarios, it is desirable for an intermediary
to be able to manipulate some parameters in Real Time Protocol (RTP)
packets, while still providing strong end-to-end security
guarantees. This document defines a cryptographic transform for the
Secure Real Time Protocol (SRTP) that uses two separate but related
cryptographic operations to provide hop-by-hop and end-to-end
security guarantees.  Both the end-to-end and hop-by-hop
cryptographic algorithms can utilize an authenticated encryption
with associated data (AEAD) algorithm or take advantage of future SRTP
transforms with different properties.
</t>
</abstract>


</front>

<middle>

<section anchor="introduction" title="Introduction">
<t>Cloud conferencing systems that are based on switched conferencing
have a central Media Distributor device that receives media from
endpoints and distributes it to other endpoints, but does not need
to interpret or change the media content.  For these systems, it is
desirable to have one cryptographic key that enables encryption and
authentication of the media
end-to-end while still allowing certain information in the header of
a Real Time Protocol (RTP) packet to be changed by the Media
Distributor.  At the same time, a separate cryptographic key
provides integrity and optional confidentiality for the media
flowing between the Media Distributor and the endpoints.  The
framework document <xref target="I-D.ietf-perc-private-media-framework"/>
describes this concept in more detail.
</t>
<t>This specification defines a transform for the Secure Real Time
Protocol (SRTP) that uses the AES-GCM algorithm <xref target="RFC7714"/> to
provide encryption and integrity for an RTP packet for the
end-to-end cryptographic key as well as a hop-by-hop cryptographic
encryption and integrity between the endpoint and the Media
Distributor. The Media Distributor decrypts and checks integrity of
the hop-by-hop security. The Media Distributor MAY change some of
the RTP header information that would impact the end-to-end
integrity. In that case, the original value of any RTP header field
that is changed is included in an &quot;Original Header Block&quot; that is
added to the packet. The new RTP packet is encrypted with the
hop-by-hop cryptographic algorithm before it is sent. The receiving
endpoint decrypts and checks integrity using the hop-by-hop
cryptographic algorithm and then replaces any parameters the Media
Distributor changed using the information in the Original Header
Block before decrypting and checking the end-to-end integrity.
</t>
<t>One can think of the double as a normal SRTP transform for encrypting
the RTP in a way where things that only know half of the key, can
decrypt and modify part of the RTP packet but not other parts,
including the media payload.
</t>
</section>

<section anchor="terminology" title="Terminology">
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
&quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;, &quot;MAY&quot;, and
&quot;OPTIONAL&quot; in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.
</t>
<t>Terms used throughout this document include:
</t>
<t>
<list style="symbols">
<t>Media Distributor: A device that receives media from endpoints and
distributes it to other endpoints, but does not need to interpret
or change the media content (see also
<xref target="I-D.ietf-perc-private-media-framework"/>)</t>
<t>end-to-end: The path from one endpoint through one or
more Media Distributors to the endpoint at the other end.</t>
<t>hop-by-hop: The path from the endpoint to or from the
Media Distributor.</t>
<t>Original Header Block (OHB): An octet string that contains the
original values from the RTP header that might have been changed
by a Media Distributor.</t>
</list>
</t>
</section>

<section anchor="cryptographic-context" title="Cryptographic Context">
<t>This specification uses a cryptographic context with two parts:
</t>
<t>
<list style="symbols">
<t>An inner (end-to-end) part that is used by endpoints that originate and
consume media to ensure the integrity of media end-to-end, and</t>
<t>An outer (hop-by-hop) part that is used between endpoints and Media
Distributors to ensure the integrity of media over a single hop and to
enable a Media Distributor to modify certain RTP header fields. RTCP
is also handled using the hop-by-hop cryptographic part.</t>
</list>
</t>
<t>The RECOMMENDED cipher for the hop-by-hop and end-to-end algorithm is
AES-GCM.  Other combinations of SRTP ciphers that support the
procedures in this document can be added to the IANA registry.
</t>
<t>The keys and salt for these algorithms are generated with the following
steps:
</t>
<t>
<list style="symbols">
<t>Generate key and salt values of the length required for the combined
inner (end-to-end) and outer (hop-by-hop) algorithms.</t>
<t>Assign the key and salt values generated for the inner (end-to-end)
algorithm to the first half of the key and the first half of the
salt for the double algorithm.</t>
<t>Assign the key and salt values for the outer (hop-by-hop) algorithm
to the second half of the key and second half of the salt for the
double algorithm. The first half of the key is referred to as the
inner key while the second half is referred to as the outer key.
When a key is used by a cryptographic algorithm, the salt used is
the part of the salt generated with that key.</t>
<t>the SSRC is the same for both the inner and out outer algorithms as
it can not be changed.</t>
<t>The SEQ and ROC are tracked independently for the inner and outer
algorithms.</t>
</list>
</t>
<t>If the Media Distributor is to be able to modify header fields but
not decrypt the payload, then it must have cryptographic key for the
outer algorithm, but not the inner (end-to-end) algorithm.  This
document does not define how the Media Distributor should be
provisioned with this information.  One possible way to provide
keying material for the outer (hop-by-hop) algorithm is to use
<xref target="I-D.ietf-perc-dtls-tunnel"/>.
</t>

<section anchor="key-derivation" title="Key Derivation">
<t>Although SRTP uses a single master key to derive keys for an SRTP
session, this transform requires separate inner and outer keys.
In order to allow the inner and outer keys to be managed
independently via the master key, the transforms defined in this
document MUST be used with the following pseudo-random function
(PRF), which preserves the separation between the two halves of the
key.  Given a positive integer <spanx style="verb">n</spanx> representing the desired output
length, a master key <spanx style="verb">k_master</spanx>, and an input <spanx style="verb">x</spanx>:
</t>

<figure align="center"><artwork align="center">
PRF\_double\_n(k\_master,x) = PRF\_(n/2)(inner(k\_master),x) || 
                              PRF\_(n/2)(outer(k\_master),x)
</artwork></figure>
<t>Here <spanx style="verb">PRF_n(k, x)</spanx> represents the AES_CM PRF KDF (see Section 4.3.3
of <xref target="RFC3711"/>) for
DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM algorithm and
AES_256_CM_PRF KDF <xref target="RFC6188"/> for DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM
algorithm. <spanx style="verb">inner(key)</spanx> represents the first half of the key, and <spanx style="verb">outer(key)</spanx>
represents the second half of the key.
</t>
</section>
</section>

<section anchor="ohb" title="Original Header Block">
<t>The Original Header Block (OHB) contains the original values of any
modified RTP header fields. In the encryption process, the OHB is
included in an SRTP packet as described in <xref target="rtp-operations"/>.  In the
decryption process, the receiving endpoint uses it to reconstruct
the original RTP header, so that it can pass the proper AAD value to
the inner transform.
</t>
<t>The OHB can reflect modifications to the following fields in an RTP header: the
payload type, the sequence number, and the marker bit.  All other fields in the
RTP header MUST remain unmodified; since the OHB cannot reflect their original
values, the receiver will be unable to verify the E2E integrity of the packet.
</t>
<t>The OHB has the following syntax (in ABNF <xref target="RFC5234"/>):
</t>

<figure align="left"><artwork align="left">
OCTET = %x00-FF

PT = OCTET
SEQ = 2OCTET
Config = OCTET
OHB = [ PT ] [ SEQ ] Config
</artwork></figure>
<t>If present, the PT and SEQ parts of the OHB contain the original payload type
and sequence number fields, respectively. The final &quot;config&quot; octet of the OHB
specifies whether these fields are present, and the original value of the
marker bit (if necessary):
</t>

<figure align="left"><artwork align="left">
+-+-+-+-+-+-+-+-+
|R R R R B M P Q|
+-+-+-+-+-+-+-+-+
</artwork></figure>
<t>
<list style="symbols">
<t>P: PT is present</t>
<t>Q: SEQ is present</t>
<t>M: Marker bit is present</t>
<t>B: Value of marker bit</t>
<t>R: Reserved, MUST be set to 0</t>
</list>
</t>
<t>In particular, an all-zero OHB config octet (0x00) indicates that
there have been no modifications from the original header.
</t>
<t>If the marker bit is not present (M=0), then B MUST be set to zero.
That is, if <spanx style="verb">C</spanx> represents the value of the config octet, then the
masked value <spanx style="verb">C &amp; 0x0C</spanx> MUST NOT have the value <spanx style="verb">0x80</spanx>.
</t>
</section>

<section anchor="rtp-operations" title="RTP Operations">
<t>As implied by the use of the word &quot;double&quot; above, this transform
applies AES-GCM to the SRTP packet twice.  This allows media
distributors to be able to modify some header fields while allowing
endpoints to verify the end-to-end integrity of a packet.
</t>
<t>The first, &quot;inner&quot; application of AES-GCM encrypts the SRTP payload
and integrity-protects a version of the SRTP header with extensions
truncated.  Omitting extensions from the inner integrity check means
that they can be modified by a media distributor holding only the
&quot;outer&quot; key.
</t>
<t>The second, &quot;outer&quot; application of AES-GCM encrypts the ciphertext
produced by the inner encryption (i.e., the encrypted payload and
authentication tag), plus an OHB that expresses any changes made
between the inner and outer transforms.
</t>
<t>A media distributor that has the outer key but not the inner key may
modify the header fields that can be included in the OHB by
decrypting, modifying, and re-encrypting the packet.
</t>

<section anchor="encrypt" title="Encrypting a Packet">
<t>To encrypt a packet, the endpoint encrypts the packet using the inner
(end-to-end) cryptographic key and then encrypts using the outer
(hop-by-hop) cryptographic key.  The encryption also supports a mode
for repair packets that only does the outer (hop-by-hop) encryption.
The processes is as follows:
</t>
<t>
<list style="numbers">
<t>Form an RTP packet.  If there are any header extensions, they MUST
use <xref target="RFC8285"/>.</t>
<t>If the packet is for repair mode data, skip to step 6.</t>
<t>Form a synthetic RTP packet with the following contents:
<list style="symbols">
<t>Header: The RTP header of the original packet with the following
modifications:</t>
<t>The X bit is set to zero</t>
<t>The header is truncated to remove any extensions (i.e., keep
only the first 12 + 4 * CC bytes of the header)</t>
<t>Payload: The RTP payload of the original packet (including padding when
present)</t>
</list></t>
<t>Apply the inner cryptographic algorithm to the synthetic RTP packet
from the previous step.</t>
<t>Replace the header of the protected RTP packet with the header of
the original packet (to restore any header extensions and reset
the X bit), and append an empty OHB (0x00) to the encrypted
payload (with the authentication tag) obtained from the step 4.</t>
<t>Apply the outer cryptographic algorithm to the RTP packet.  If
encrypting RTP header extensions hop-by-hop, then <xref target="RFC6904"/> MUST
be used when encrypting the RTP packet using the outer
cryptographic key.</t>
</list>
</t>
<t>When using EKT <xref target="I-D.ietf-perc-srtp-ekt-diet"/>, the EKT Field comes
after the SRTP packet exactly like using EKT with any other SRTP
transform.
</t>
</section>

<section anchor="relay" title="Relaying a Packet">
<t>The Media Distributor has the part of the key for the outer
(hop-by-hop) cryptographic algorithm, but it does not have the part
of the key for the (end-to-end) cryptographic algorithm.  The
cryptographic algorithm and key used to decrypt a packet and
any encrypted RTP header extensions would be the same as those
used in the endpoint's outer algorithm and key.
</t>
<t>In order to modify a packet, the Media Distributor decrypts the
received packet, modifies the packet, updates the OHB with
any modifications not already present in the OHB, and re-encrypts
the packet using the the outer (hop-by-hop) cryptographic key
before transmitting.
</t>
<t>
<list style="numbers">
<t>Apply the outer (hop-by-hop) cryptographic algorithm to decrypt the
packet.  If decrypting RTP header extensions hop-by-hop, then
<xref target="RFC6904"/> MUST be used.  Note that the RTP payload produced by
this decryption operation contains the original encrypted payload
with the tag from the inner transform and the OHB appended.</t>
<t>Make any desired changes to the fields are allowed to be changed,
i.e., PT, SEQ, and M.  The Media Distributor MAY also make
modifications to header extensions, without the need to reflect
these changes in the OHB.</t>
<t>Reflect any changes to header fields in the OHB:
<list style="symbols">
<t>If Media Distributor changed a field that is not already in the
OHB, then it MUST add the original value of the field to the
OHB.  Note that this might result in an increase in the size of
the OHB.</t>
<t>If the Media Distributor took a field that had previously been
modified and reset to its original value, then it SHOULD drop
the corresponding information from the OHB.  Note that this
might result in a decrease in the size of the OHB.</t>
<t>Otherwise, the Media Distributor MUST NOT modify the OHB.</t>
</list></t>
<t>Apply the outer (hop-by-hop) cryptographic algorithm to the
packet. If the RTP Sequence Number has been modified, SRTP
processing happens as defined in SRTP and will end up using the new
Sequence Number. If encrypting RTP header extensions hop-by-hop,
then <xref target="RFC6904"/> MUST be used.</t>
</list>
</t>
<t>In order to avoid nonce reuse, the cryptographic contexts used in
step 1 and step 5 MUST use different, independent master keys.  Note
that this means that the key used for decryption by the MD MUST be
different from the key used for re-encryption to the end recipient.
</t>
<t>Note that if multiple MDs modify the same packet, then the first MD
to alter a given header field is the one that adds it to the OHB.
If a subsequent MD changes the value of a header field that has
already been changed, then the original value will already be in the
OHB, so no update to the OHB is required.
</t>
<t>A Media Distributor that decrypts, modifies, and re-encrypts
packets in this way MUST use an independent key for each recipient,
and MUST NOT re-encrypt the packet using the sender's keys.  If the
Media Distributor decrypts and re-encrypts with the same key and
salt, it will result in the reuse of a (key, nonce) pair,
undermining the security of AES-GCM.
</t>
</section>

<section anchor="decrypt" title="Decrypting a Packet">
<t>To decrypt a packet, the endpoint first decrypts and verifies using
the outer (hop-by-hop) cryptographic key, then uses the OHB to
reconstruct the original packet, which it decrypts and verifies with
the inner (end-to-end) cryptographic key.
</t>
<t>
<list style="numbers">
<t>Apply the outer cryptographic algorithm to the packet.  If the
integrity check does not pass, discard the packet.  The result of
this is referred to as the outer SRTP packet.  If decrypting RTP
header extensions hop-by-hop, then <xref target="RFC6904"/> MUST be used when
decrypting the RTP packet using the outer cryptographic key.</t>
<t>If the packet is for repair mode data, skip the rest of the
steps. Note that the packet that results from the repair algorithm
will still have encrypted data that needs to be decrypted as
specified by the repair algorithm sections.</t>
<t>Remove the inner authentication tag and the OHB from the end of the
payload of the outer SRTP packet.</t>
<t>Form a new synthetic SRTP packet with:
<list style="symbols">
<t>Header = Received header, with the following modifications:</t>
<t>Header fields replaced with values from OHB (if any)</t>
<t>The X bit is set to zero</t>
<t>The header is truncated to remove any extensions (i.e., keep
only the first 12 + 4 * CC bytes of the header)</t>
<t>Payload is the encrypted payload from the outer SRTP packet (after
the inner tag and OHB have been stripped).</t>
<t>Authentication tag is the inner authentication tag from the outer
SRTP packet.</t>
</list></t>
<t>Apply the inner cryptographic algorithm to this synthetic SRTP
packet.  Note if the RTP Sequence Number was changed by the Media
Distributor, the synthetic packet has the original Sequence
Number. If the integrity check does not pass, discard the packet.</t>
</list>
</t>
<t>Once the packet has been successfully decrypted, the application needs
to be careful about which information it uses to get the correct
behavior.  The application MUST use only the information found in the
synthetic SRTP packet and MUST NOT use the other data that was in the
outer SRTP packet with the following exceptions:
</t>
<t>
<list style="symbols">
<t>The PT from the outer SRTP packet is used for normal matching to SDP
and codec selection.</t>
<t>The sequence number from the outer SRTP packet is used for normal
RTP ordering.</t>
</list>
</t>
<t>The PT and sequence number from the inner SRTP packet can be used for
collection of various statistics.
</t>
<t>If the RTP header of the outer packet contains extensions, they MAY
be used.  However, because extensions are not protected end-to-end,
implementations SHOULD reject an RTP packet containing headers that
would require end-to-end protection.
</t>
</section>
</section>

<section anchor="rtcp-operations" title="RTCP Operations">
<t>Unlike RTP, which is encrypted both hop-by-hop and end-to-end using
two separate cryptographic keys, RTCP is encrypted using only the outer
(hop-by-hop) cryptographic key. The procedures for RTCP encryption
are specified in <xref target="RFC3711"/> and this document introduces no
additional steps.
</t>
</section>

<section anchor="use-with-other-rtp-mechanisms" title="Use with Other RTP Mechanisms">
<t>Media Distributors sometimes interact with RTP media packets sent
by endpoints, e.g., to provide recovery or receive commands via
DTMF.  When media packets are encrypted end-to-end, these procedures
require modification.  (End-to-end interactions, including
end-to-end recovery, are not affected by end-to-end encryption.)
</t>
<t>Repair mechanisms, in general, will need to perform recovery on
encrypted packets (double-encrypted when using this transform),
since the Media Distributor does not have access to the plaintext of
the packet, only an intermediate, E2E-encrypted form.
</t>
<t>When the recovery mechanism calls for the recovery packet itself to
be encrypted, it is encrypted with only the outer, hop-by-hop key.  This
allows a media distributor to generate recovery packets without
having access to the inner, end-to-end keys.  However, it also results in
recovery packets being triple-encrypted, twice for the base
transform, and once for the recovery protection.
</t>

<section anchor="rtx" title="RTP Retransmission (RTX)">
<t>When using RTX <xref target="RFC4588"/> with double, the cached payloads MUST be the
double-encrypted packets, i.e., the bits that are sent over the wire to the
other side. When encrypting a retransmission packet, it MUST be
encrypted the packet in repair mode (i.e., with only the hop-by-hop key).
</t>
<t>If the Media Distributor were to cache the inner, E2E-encrypted
payload and retransmit that with an RTX OSN field prepended, then
the modifications to the payload would cause the inner integrity
check to fail at the receiver.
</t>
<t>A typical RTX receiver would decrypt the packet, undo the RTX
transformation, then process the resulting packet normally by
using the steps in <xref target="decrypt"/>.
</t>
</section>

<section anchor="red" title="Redundant Audio Data (RED)">
<t>When using RED <xref target="RFC2198"/> with double, the processing at the sender
and receiver is the same as when using RED with any other SRTP
transform.
</t>
<t>The main difference between double and any other transform is that
in an intermediated environment, usage of RED must be end-to-end.  A
Media Distributor cannot synthesize RED packets, because it lacks
access to the plaintext media payloads that are combined to form a
RED payload.
</t>
<t>Note that FlexFEC may often provide similar or better repair
capabilities compared to RED.  For most applications, FlexFEC is a
better choice than RED; in particular, FlexFEC has modes in which
the Media Distributor can synthesize recovery packets.
</t>
</section>

<section anchor="fec" title="Forward Error Correction (FEC)">
<t>When using Flex FEC <xref target="I-D.ietf-payload-flexible-fec-scheme"/> with
double, repair packets MUST be constructed by first
double-encrypting the packet, then performing FEC.  Processing of
repair packets proceeds in the opposite order, performing FEC
recovery and then decrypting.  This ensures that the original media
is not revealed to the Media Distributor but at the same time allows
the Media Distributor to repair media.  When encrypting a packet
that contains the Flex FEC data, which is already encrypted, it MUST
be encrypted with only the outer, hop-by-hop transform.
</t>
<t>The algorithm recommended in <xref target="I-D.ietf-rtcweb-fec"/> for repair of video
is Flex FEC <xref target="I-D.ietf-payload-flexible-fec-scheme"/>.  Note that for
interoperability with WebRTC, <xref target="I-D.ietf-rtcweb-fec"/> recommends not
using additional FEC only m-line in SDP for the repair packets.
</t>
</section>

<section anchor="dtmf" title="DTMF">
<t>When DTMF is sent using the mechanism in <xref target="RFC4733"/>, it is
end-to-end encrypted and the relay can not read it, so it cannot be
used to control the relay. Other out of band methods to control the
relay need to be used instead.
</t>
</section>
</section>

<section anchor="recommended-inner-and-outer-cryptographic-algorithms" title="Recommended Inner and Outer Cryptographic Algorithms">
<t>This specification recommends and defines AES-GCM as both the inner
and outer cryptographic algorithms, identified as
DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM and
DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM.  These algorithm provide for
authenticated encryption and will consume additional processing time
double-encrypting for hop-by-hop and end-to-end.  However, the
approach is secure and simple, and is thus viewed as an acceptable
trade-off in processing efficiency.
</t>
<t>Note that names for the cryptographic transforms are of the form
DOUBLE_(inner algorithm)_(outer algorithm).
</t>
<t>While this document only defines a profile based on AES-GCM, it is
possible for future documents to define further profiles with
different inner and outer algorithms in this same framework.  For example,
if a new SRTP transform was defined that encrypts some or all of the
RTP header, it would be reasonable for systems to have the option of
using that for the outer algorithm.  Similarly, if a new transform was
defined that provided only integrity, that would also be reasonable to
use for the outer transform as the payload data is already encrypted by the
inner transform.
</t>
<t>The AES-GCM cryptographic algorithm introduces an additional 16
octets to the length of the packet.  When using AES-GCM for both the
inner and outer cryptographic algorithms, the total additional
length is 32 octets.  The OHB will consume an additional 1-4 octets.
Packets in repair mode will carry additional repair data, further
increasing their size.
</t>
</section>

<section anchor="sec" title="Security Considerations">
<t>This SRTP transform provides protection against two classes of
attacker: An network attacker that knows neither the inner nor outer
keys, and a malicious MD that knows the outer key.  Obviously, it
provides no protections against an attacker that holds both the
inner and outer keys.
</t>
<t>The protections with regard to the network are the same as with the
normal SRTP AES-GCM transforms.  The major difference is that the
double transforms are designed to work better in a group context.
In such contexts, it is important to note that because these
transforms are symmetric, they do not protect against attacks within
the group.  Any member of the group can generate valid SRTP packets
for any SSRC in use by the group.
</t>
<t>With regard to a malicious MD, the recipient can verify the
integrity of the base header fields and confidentiality and
integrity of the payload.  The recipient has no assurance, however,
of the integrity of the header extensions in the packet.
</t>
<t>The main innovation of this transform relative to other SRTP
transforms is that it allows a partly-trusted MD to decrypt, modify,
and re-encrypt a packet.  When this is done, the cryptographic
contexts used for decryption and re-encryption MUST use different,
independent master keys.  If the same context is
used, the nonce formation rules for SRTP will cause the same key and
nonce to be used with two different plaintexts, which substantially
degrades the security of AES-GCM.
</t>
<t>In other words, from the perspective of the MD, re-encrypting
packets using this protocol will involve the same cryptographic
operations as if it had established independent AES-GCM crypto
contexts with the sender and the receiver.  If the MD doesn't modify
any header fields, then an MD that supports AES-GCM could be unused
unmodified.
</t>
</section>

<section anchor="iana" title="IANA Considerations">

<section anchor="dtlssrtp" title="DTLS-SRTP">
<t>We request IANA to add the following values to defines a DTLS-SRTP
&quot;SRTP Protection Profile&quot; defined in <xref target="RFC5764"/>.
</t>
<texttable>
<ttcol align="left">Value</ttcol>
<ttcol align="left">Profile</ttcol>
<ttcol align="left">Reference</ttcol>

<c>{0x00, 0x09}</c><c>DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM</c><c>RFCXXXX</c>
<c>{0x00, 0x0A}</c><c>DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM</c><c>RFCXXXX</c>
</texttable>
<t>Note to IANA: Please assign value RFCXXXX and update table to point at
this RFC for these values.
</t>
<t>The SRTP transform parameters for each of these protection are:
</t>

<figure align="left"><artwork align="left">
DOUBLE_AEAD_AES_128_GCM_AEAD_AES_128_GCM
    cipher:                 AES_128_GCM then AES_128_GCM 
    cipher_key_length:      256 bits
    cipher_salt_length:     192 bits
    aead_auth_tag_length:   256 bits
    auth_function:          NULL
    auth_key_length:        N/A
    auth_tag_length:        N/A
    maximum lifetime:       at most 2^31 SRTCP packets and
                            at most 2^48 SRTP packets

DOUBLE_AEAD_AES_256_GCM_AEAD_AES_256_GCM
    cipher:                 AES_256_GCM then AES_256_GCM 
    cipher_key_length:      512 bits
    cipher_salt_length:     192 bits
    aead_auth_tag_length:   256 bits
    auth_function:          NULL
    auth_key_length:        N/A
    auth_tag_length:        N/A
    maximum lifetime:       at most 2^31 SRTCP packets and
                            at most 2^48 SRTP packets
</artwork></figure>
<t>The first half of the key and salt is used for the inner (end-to-end)
algorithm and the second half is used for the outer (hop-by-hop)
algorithm.
</t>
</section>
</section>

<section anchor="acknowledgments" title="Acknowledgments">
<t>Thank you for reviews and improvements to this specification from Alex
Gouaillard, David Benham, Magnus Westerlund, Nils Ohlmeier, Paul
Jones, Roni Even, and Suhas Nandakumar. In addition, thank you to
Sergio Garcia Murillo proposed the change of transporting the OHB
information in the RTP payload instead of the RTP header.
</t>
</section>

</middle>
<back>
<references title="Normative References">
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3711.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5764.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6188.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6904.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7714.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8285.xml"?>
</references>
<references title="Informative References">
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-payload-flexible-fec-scheme.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-perc-dtls-tunnel.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-perc-private-media-framework.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-perc-srtp-ekt-diet.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-rtcweb-fec.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2198.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4588.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4733.xml"?>
<?rfc include="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"?>
</references>

<section anchor="encryption-overview" title="Encryption Overview">
<t>The following figure shows a double encrypted SRTP packet. The sides
indicate the parts of the packet that are encrypted and authenticated
by the hop-by-hop and end-to-end operations.
</t>

<figure align="center"><artwork align="center">
       0                   1                   2                   3 
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;++
    |V=2|P|X|  CC   |M|     PT      |       sequence number         | IO 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ IO 
    |                           timestamp                           | IO 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ IO 
    |           synchronization source (SSRC) identifier            | IO 
    +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ IO 
    |            contributing source (CSRC) identifiers             | IO 
    |                               ....                            | IO 
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;+O 
    |                    RTP extension (OPTIONAL) ...               | |O 
+&gt;+&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;+O 
O I |                          payload  ...                         | IO 
O I |                               +-------------------------------+ IO 
O I |                               | RTP padding   | RTP pad count | IO 
O +&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;+O 
O | |                    E2E authentication tag                     | |O 
O | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |O 
O | |                            OHB ...                            | |O 
+&gt;| +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |+
| | |                    HBH authentication tag                     | || 
| | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ||
| |                                                                   ||
| +- E2E Encrypted Portion               E2E Authenticated Portion ---+|
|                                                                      |
+--- HBH Encrypted Portion               HBH Authenticated Portion ----+
</artwork></figure>
</section>

</back>
</rfc>
